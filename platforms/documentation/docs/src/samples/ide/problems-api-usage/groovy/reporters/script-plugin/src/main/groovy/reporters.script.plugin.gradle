import org.gradle.api.problems.IdFactory
import org.gradle.api.problems.Problems
import org.gradle.api.problems.Severity

interface Injected {
    @Inject Problems getProblems()
}

def problems = project.objects.newInstance(Injected).getProblems()
def problemGroup = IdFactory.instance().createRootProblemGroup("root", "Root Group")

problems.getReporter().report {
    it.id(IdFactory.instance().createProblemId('adhoc-script-deprecation', 'Deprecated script plugin', problemGroup))
        .contextualLabel("Deprecated script plugin 'demo-script-plugin'")
        .severity(Severity.WARNING)
        .solution("Please use 'standard-plugin-2' instead of this plugin")
}

tasks.register('warningTask') {
    doLast {
        problems.getReporter().report {
            it.id(IdFactory.instance().createProblemId('adhoc-task-deprecation', 'Deprecated task', problemGroup))
                .contextualLabel("Task 'warningTask' is deprecated")
                .severity(Severity.WARNING)
                .solution("Please use 'warningTask2' instead of this task")
        }
    }
}

tasks.register('failingTask') {
    doLast {
        problems.getReporter().throwing(new RuntimeException("The 'failingTask' should not be called")) {
            it.id(IdFactory.instance().createProblemId('broken-task', 'Task should not be called', problemGroup))
                .contextualLabel("Task 'failingTask' should not be called")
                .severity(Severity.ERROR)
                .solution("Please use 'successfulTask' instead of this task")
        }
    }
}
